/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.n52.kommonitor.importer.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import org.n52.kommonitor.models.Error;
import org.n52.kommonitor.models.UploadedFileType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-22T08:55:12.468+01:00")

@Tag(name = "upload", description = "the upload API")
public interface UploadApi {

    Logger log = LoggerFactory.getLogger(UploadApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(
            summary = "Get a list of files",
            description = "Retrieve a list of information for all uploaded files",
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = { @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UploadedFileType.class))) }),
                    @ApiResponse(responseCode = "401", description = "API key is missing or invalid")}
    )
    @RequestMapping(value = "/upload",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UploadedFileType>> getUploadedFiles() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"name\" : \"name\",  \"contentType\" : \"contentType\"}, {  \"name\" : \"name\",  \"contentType\" : \"contentType\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UploadApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(
            summary = "Upload a file",
            description = "Upload a file that can be used as datasource for importing or updating a KomMonitor resource.",
            tags={ "upload", },
            responses = {
                    @ApiResponse(responseCode = "201", description = "Created", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)) }),
                    @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
                    @ApiResponse(responseCode = "500", description = "Unexpected error", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)) })}
    )
    @RequestMapping(value = "/upload",
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<String> upload(
            @Parameter(description = "file detail")
            @Valid @RequestPart("file") MultipartFile file,
            @Parameter(description = "The name that will be used for storing the file on the server", required=true)
            @RequestParam(value="filename", required=true)  String filename) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UploadApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
