/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.n52.kommonitor.importer.api;

import org.n52.kommonitor.importer.models.DataSourceType;
import org.n52.kommonitor.importer.models.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-04T14:17:33.692+01:00")

@Api(value = "datasourceTypes", description = "the datasourceTypes API")
public interface DatasourceTypesApi {

    @ApiOperation(value = "Retrieve information about the selected datasource type", nickname = "getSupportedDataSourceTypeByType", notes = "Retrieve information about the parameters for the selected datasource type that can be used for importing data into the KomMonitor Data Management layer", response = DataSourceType.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "datasources", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DataSourceType.class),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 404, message = "The specified datasource type is not supported", response = Error.class) })
    @RequestMapping(value = "/datasourceTypes/{type}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataSourceType> getSupportedDataSourceTypeByType(@ApiParam(value = "unique type of the datasource",required=true) @PathVariable("type") String type);


    @ApiOperation(value = "Retrieve information about all supported datasource types", nickname = "getSupportedDataSourceTypes", notes = "Retrieve information about the parameters of all supported datasource types that can be used for importing data into the KomMonitor Data Management layer", response = DataSourceType.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "datasources", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DataSourceType.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/datasourceTypes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DataSourceType>> getSupportedDataSourceTypes();

}
