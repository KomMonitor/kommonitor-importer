/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.n52.kommonitor.importer.api;

import org.n52.kommonitor.models.DataSourceType;
import org.n52.kommonitor.models.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-08-09T11:12:13.634041800+02:00[Europe/Berlin]")
@Validated
@Tag(name = "datasources", description = "the datasources API")
public interface DatasourceTypesApi {

    /**
     * GET /datasourceTypes/{type} : Retrieve information about the selected datasource type
     * Retrieve information about the parameters for the selected datasource type that can be used for importing data into the KomMonitor Data Management layer
     *
     * @param type unique type of the datasource (required)
     * @return OK (status code 200)
     *         or API key is missing or invalid (status code 401)
     *         or No support for the specified datasource type (status code 404)
     */
    @Operation(
        operationId = "getSupportedDataSourceTypeByType",
        summary = "Retrieve information about the selected datasource type",
        description = "Retrieve information about the parameters for the selected datasource type that can be used for importing data into the KomMonitor Data Management layer",
        tags = { "datasources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataSourceType.class))
            }),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "No support for the specified datasource type", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/datasourceTypes/{type}",
        produces = { "application/json" }
    )
    ResponseEntity<DataSourceType> getSupportedDataSourceTypeByType(
        @Parameter(name = "type", description = "unique type of the datasource", required = true, in = ParameterIn.PATH) @PathVariable("type") String type
    );


    /**
     * GET /datasourceTypes : Retrieve information about all supported datasource types
     * Retrieve information about the parameters of all supported datasource types that can be used for importing data into the KomMonitor Data Management layer
     *
     * @return OK (status code 200)
     *         or API key is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getSupportedDataSourceTypes",
        summary = "Retrieve information about all supported datasource types",
        description = "Retrieve information about the parameters of all supported datasource types that can be used for importing data into the KomMonitor Data Management layer",
        tags = { "datasources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DataSourceType.class)))
            }),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "oauth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/datasourceTypes",
        produces = { "application/json" }
    )
    ResponseEntity<List<DataSourceType>> getSupportedDataSourceTypes(
        
    );

}
