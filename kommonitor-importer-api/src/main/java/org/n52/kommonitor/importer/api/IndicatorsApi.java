/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.n52.kommonitor.importer.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import org.n52.kommonitor.models.Error;
import org.n52.kommonitor.models.ImportIndicatorPOSTInputType;
import org.n52.kommonitor.models.ImportResponseType;
import org.n52.kommonitor.models.UpdateIndicatorPOSTInputType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.io.IOException;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-02-26T14:16:35.930+01:00")

@Tag(name = "indicators", description = "the indicators API")
public interface IndicatorsApi {

    Logger log = LoggerFactory.getLogger(IndicatorsApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(
            summary = "Import a new indicator dataset",
            description = "Import an indicator dataset for a certain period of time and spatial unit/level. Parses Input source, extracts relevant data, performs schema mapping to KomMonitor data model and calls POST /indicators of KomMonitor Data Management API",
            tags={ "indicators", },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = ImportResponseType.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)) }),
                    @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
                    @ApiResponse(responseCode = "500", description = "Unexpected error", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)) })
            }
    )
    @RequestMapping(value = "/indicators",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ImportResponseType> importIndicator(
            @Parameter(description = "indicator data" ,required=true )
            @Valid @RequestBody ImportIndicatorPOSTInputType indicatorData) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"importedFeatures\" : [ \"importedFeatures\", \"importedFeatures\" ],  \"failedFeatures\" : [ \"failedFeatures\", \"failedFeatures\" ],  \"uri\" : \"uri\"}", ImportResponseType.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default IndicatorsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(
            summary = "Update a new indicator dataset",
            description = "Update an indicator dataset for a certain period of time and spatial unit/level. Parses Input source, extracts relevant data, performs schema mapping to KomMonitor data model and calls PUT /indicators of KomMonitor Data Management API",
            tags={ "indicators", },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = ImportResponseType.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)) }),
                    @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
                    @ApiResponse(responseCode = "500", description = "Unexpected error", content = { @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)) }) })
    @RequestMapping(value = "/indicators/update",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ImportResponseType> updateIndicator(
            @Parameter(description = "indicator data" ,required=true )
            @Valid @RequestBody UpdateIndicatorPOSTInputType indicatorData) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"importedFeatures\" : [ \"importedFeatures\", \"importedFeatures\" ],  \"failedFeatures\" : [ \"failedFeatures\", \"failedFeatures\" ],  \"uri\" : \"uri\"}", ImportResponseType.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default IndicatorsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
