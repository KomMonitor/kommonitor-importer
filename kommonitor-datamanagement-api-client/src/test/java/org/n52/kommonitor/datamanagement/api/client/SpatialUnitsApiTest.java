/*
 * KomMonitor Data Access API
 * erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.n52.kommonitor.datamanagement.api.client;

import java.math.BigDecimal;

import org.n52.kommonitor.datamanagement.api.models.SpatialUnitOverviewType;
import org.n52.kommonitor.datamanagement.api.models.SpatialUnitPATCHInputType;
import org.n52.kommonitor.datamanagement.api.models.SpatialUnitPUTInputType;
import org.n52.kommonitor.importer.models.SpatialUnitPOSTInputType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for SpatialUnitsApi
 */
@Ignore
public class SpatialUnitsApiTest {

    private final SpatialUnitsApi api = new SpatialUnitsApi();

    
    /**
     * Add a new spatial-unit
     *
     * Add/Register a spatial unit for a certain period of time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSpatialUnitAsBodyTest() {
        SpatialUnitPOSTInputType featureData = null;
        api.addSpatialUnitAsBody(featureData);

        // TODO: test validations
    }
    
    /**
     * Delete the features/contents of the selected spatial-unit
     *
     * Delete the features/contents of the selected spatial-unit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpatialUnitByIdTest() {
        String spatialUnitId = null;
        api.deleteSpatialUnitById(spatialUnitId);

        // TODO: test validations
    }
    
    /**
     * Delete the features/contents of the selected spatial-unit, year and month
     *
     * Delete the features/contents of the selected spatial-unit, year and month
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpatialUnitByIdAndYearAndMonthTest() {
        String spatialUnitId = null;
        BigDecimal year = null;
        BigDecimal month = null;
        BigDecimal day = null;
        api.deleteSpatialUnitByIdAndYearAndMonth(spatialUnitId, year, month, day);

        // TODO: test validations
    }
    
    /**
     * retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)
     *
     * retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSpatialUnitFeaturesByIdTest() {
        String spatialUnitId = null;
        String simplifyGeometries = null;
        String response = api.getAllSpatialUnitFeaturesById(spatialUnitId, simplifyGeometries);

        // TODO: test validations
    }
    
    /**
     * retrieve information about available features of different spatial units/levels
     *
     * retrieve information about available features of different spatial units/levels
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpatialUnitsTest() {
        List<SpatialUnitOverviewType> response = api.getSpatialUnits();

        // TODO: test validations
    }
    
    /**
     * retrieve information about available features of the selected spatial unit/level
     *
     * retrieve information about available features of the selected spatial unit/level
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpatialUnitsByIdTest() {
        String spatialUnitId = null;
        SpatialUnitOverviewType response = api.getSpatialUnitsById(spatialUnitId);

        // TODO: test validations
    }
    
    /**
     * retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON
     *
     * retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpatialUnitsByIdAndYearAndMonthTest() {
        String spatialUnitId = null;
        BigDecimal year = null;
        BigDecimal month = null;
        BigDecimal day = null;
        String simplifyGeometries = null;
        byte[] response = api.getSpatialUnitsByIdAndYearAndMonth(spatialUnitId, year, month, day, simplifyGeometries);

        // TODO: test validations
    }
    
    /**
     * retrieve the JSON schema for the selected spatial unit/level
     *
     * retrieve the JSON schema for the selected spatial unit/level. The JSON schema indicates the property structure of the dataset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpatialUnitsSchemaByIdTest() {
        String spatialUnitId = null;
        String response = api.getSpatialUnitsSchemaById(spatialUnitId);

        // TODO: test validations
    }
    
    /**
     * Modify/Update the features of the selected spatial-unit
     *
     * Modify/Update the features of the selected spatial-unit. The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark &#39;old&#39; geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpatialUnitAsBodyTest() {
        String spatialUnitId = null;
        SpatialUnitPUTInputType featureData = null;
        api.updateSpatialUnitAsBody(spatialUnitId, featureData);

        // TODO: test validations
    }
    
    /**
     * Modify/Update the metadata of the selected spatial-unit
     *
     * Modify/Update the metadata of the selected spatial-unit. This replaces the formerly stored metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpatialUnitMetadataAsBodyTest() {
        String spatialUnitId = null;
        SpatialUnitPATCHInputType metadata = null;
        api.updateSpatialUnitMetadataAsBody(spatialUnitId, metadata);

        // TODO: test validations
    }
    
}
