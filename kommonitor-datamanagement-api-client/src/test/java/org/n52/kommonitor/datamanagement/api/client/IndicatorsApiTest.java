/*
 * KomMonitor Data Access API
 * erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.n52.kommonitor.datamanagement.api.client;

import java.math.BigDecimal;
import org.n52.kommonitor.importer.models.IndicatorOverviewType;
import org.n52.kommonitor.importer.models.IndicatorPATCHInputType;
import org.n52.kommonitor.importer.models.IndicatorPOSTInputType;
import org.n52.kommonitor.importer.models.IndicatorPUTInputType;
import org.n52.kommonitor.importer.models.IndicatorPropertiesWithoutGeomType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IndicatorsApi
 */
@Ignore
public class IndicatorsApiTest {

    private final IndicatorsApi api = new IndicatorsApi();

    
    /**
     * Add a new indicator dataset
     *
     * Add/Register an indicator dataset for a certain period of time and spatial unit/level
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIndicatorAsBodyTest() {
        IndicatorPOSTInputType indicatorData = null;
        api.addIndicatorAsBody(indicatorData);

        // TODO: test validations
    }
    
    /**
     * Delete the features/contents of the selected indicator dataset
     *
     * Delete the features/contents of the selected indicator dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIndicatorByIdTest() {
        String indicatorId = null;
        api.deleteIndicatorById(indicatorId);

        // TODO: test validations
    }
    
    /**
     * Delete the features/contents of the selected indicator dataset for the selected spatial unit
     *
     * Delete the features/contents of the selected indicator dataset for the selected spatial unit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIndicatorByIdAndSpatialUnitIdTest() {
        String indicatorId = null;
        String spatialUnitId = null;
        api.deleteIndicatorByIdAndSpatialUnitId(indicatorId, spatialUnitId);

        // TODO: test validations
    }
    
    /**
     * Delete the features/contents of the selected indicator dataset, selected by year and month
     *
     * Delete the features/contents of the selected indicator dataset, selected by year and month
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIndicatorByIdAndYearAndMonthTest() {
        String indicatorId = null;
        String spatialUnitId = null;
        BigDecimal year = null;
        BigDecimal month = null;
        BigDecimal day = null;
        api.deleteIndicatorByIdAndYearAndMonth(indicatorId, spatialUnitId, year, month, day);

        // TODO: test validations
    }
    
    /**
     * retrieve information about the selected indicator
     *
     * retrieve information about the selected indicator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndicatorByIdTest() {
        String indicatorId = null;
        IndicatorOverviewType response = api.getIndicatorById(indicatorId);

        // TODO: test validations
    }
    
    /**
     * retrieve the indicator for the selected spatial unit as GeoJSON
     *
     * retrieve the indicator for the selected spatial unit as GeoJSON
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndicatorBySpatialUnitIdAndIdTest() {
        String indicatorId = null;
        String spatialUnitId = null;
        String simplifyGeometries = null;
        byte[] response = api.getIndicatorBySpatialUnitIdAndId(indicatorId, spatialUnitId, simplifyGeometries);

        // TODO: test validations
    }
    
    /**
     * retrieve the indicator for the selected spatial unit, year and month as GeoJSON
     *
     * retrieve the indicator for the selected spatial unit, year and month as GeoJSON
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndicatorBySpatialUnitIdAndIdAndYearAndMonthTest() {
        String indicatorId = null;
        String spatialUnitId = null;
        BigDecimal year = null;
        BigDecimal month = null;
        BigDecimal day = null;
        String simplifyGeometries = null;
        byte[] response = api.getIndicatorBySpatialUnitIdAndIdAndYearAndMonth(indicatorId, spatialUnitId, year, month, day, simplifyGeometries);

        // TODO: test validations
    }
    
    /**
     * retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!
     *
     * retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndicatorBySpatialUnitIdAndIdAndYearAndMonthWithoutGeometryTest() {
        String indicatorId = null;
        String spatialUnitId = null;
        BigDecimal year = null;
        BigDecimal month = null;
        BigDecimal day = null;
        List<IndicatorPropertiesWithoutGeomType> response = api.getIndicatorBySpatialUnitIdAndIdAndYearAndMonthWithoutGeometry(indicatorId, spatialUnitId, year, month, day);

        // TODO: test validations
    }
    
    /**
     * retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!
     *
     * retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndicatorBySpatialUnitIdAndIdWithoutGeometryTest() {
        String indicatorId = null;
        String spatialUnitId = null;
        List<IndicatorPropertiesWithoutGeomType> response = api.getIndicatorBySpatialUnitIdAndIdWithoutGeometry(indicatorId, spatialUnitId);

        // TODO: test validations
    }
    
    /**
     * retrieve information about available indicators
     *
     * retrieve information about available indicators
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndicatorsTest() {
        List<IndicatorOverviewType> response = api.getIndicators();

        // TODO: test validations
    }
    
    /**
     * Modify/Update the contents of the selected indicator dataset
     *
     * Modify/Update the contents of the selected indicator dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIndicatorAsBodyTest() {
        String indicatorId = null;
        IndicatorPUTInputType indicatorData = null;
        api.updateIndicatorAsBody(indicatorId, indicatorData);

        // TODO: test validations
    }
    
    /**
     * Modify/Update the metadata of the selected indicator dataset
     *
     * Modify/Update the metadata of the selected indicator dataset. This replaces the formerly stored metadata.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIndicatorMetadataAsBodyTest() {
        String indicatorId = null;
        IndicatorPATCHInputType metadata = null;
        api.updateIndicatorMetadataAsBody(indicatorId, metadata);

        // TODO: test validations
    }
    
}
