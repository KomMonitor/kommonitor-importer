/*
 * KomMonitor Data Access API
 * erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.n52.kommonitor.datamanagement.api.legacy.client;

import java.io.IOException;
import java.math.BigDecimal;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.n52.kommonitor.datamanagement.api.legacy.ApiClient;

import org.n52.kommonitor.models.GeoresourceOverviewType;
import org.n52.kommonitor.models.GeoresourcePATCHInputType;
import org.n52.kommonitor.models.GeoresourcePOSTInputType;
import org.n52.kommonitor.models.GeoresourcePUTInputType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.client.RestClientTest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.client.ExpectedCount;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.util.*;

import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;

/**
 * API tests for GeoresourcesApi
 *
 * @author <a href="mailto:s.drost@52north.org">Sebastian Drost</a>
 */
@RestClientTest(GeoresourcesApi.class)
@ContextConfiguration(classes = {ApiClient.class, GeoresourcesApi.class, RestTemplate.class})
public class GeoresourcesApiIT {

    private static final String BASE_PATH = "http://localhost:8085/management";

    @Autowired
    private GeoresourcesApi api;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private ObjectMapper mapper;

    private MockRestServiceServer mockServer;

    @BeforeEach
    private void init() throws IOException {
        api.getApiClient().setBasePath(BASE_PATH);
        mockServer = MockRestServiceServer.createServer(restTemplate);
    }

    /**
     * Add a new geo-resource
     * <p>
     * Add/Register a geo-resource dataset for a certain period of time
     */
    @org.junit.jupiter.api.Test
    public void addGeoresourceAsBodyTest() throws IOException {
        HttpHeaders headers = new HttpHeaders();
        mockServer.expect(ExpectedCount.once(),
                requestTo(BASE_PATH + "/georesources"))
                .andExpect(method(HttpMethod.POST))
                .andRespond(withStatus(HttpStatus.CREATED)
                );

        api.addGeoresourceAsBody(Mockito.mock(GeoresourcePOSTInputType.class));

        mockServer.verify();
    }

    /**
     * Delete the features/contents of the selected geo-resource dataset
     * <p>
     * Delete the features/contents of the selected geo-resource dataset
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    @Disabled
    public void deleteGeoresourceByIdTest() {
        String georesourceId = null;
        api.deleteGeoresourceById(georesourceId);

        // TODO: test validations
    }

    /**
     * Delete the features/contents of the selected geo-resource dataset, selected by year and month
     * <p>
     * Delete the features/contents of the selected geo-resource dataset, selected by year and month
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    @Disabled
    public void deleteGeoresourceByIdAndYearAndMonthTest() {
        String georesourceId = null;
        BigDecimal year = null;
        BigDecimal month = null;
        BigDecimal day = null;
        api.deleteGeoresourceByIdAndYearAndMonth(georesourceId, year, month, day);

        // TODO: test validations
    }

    /**
     * retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)
     * <p>
     * retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    @Disabled
    public void getAllGeoresourceFeaturesByIdTest() {
        String georesourceId = null;
        String simplifyGeometries = null;
        String response = api.getAllGeoresourceFeaturesById(georesourceId, simplifyGeometries);

        // TODO: test validations
    }

    /**
     * retrieve information about available features of the selected geo-resource dataset
     * <p>
     * retrieve information about available features of the selected geo-resource dataset
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    @Disabled
    public void getGeoresourceByIdTest() {
        String georesourceId = null;
        GeoresourceOverviewType response = api.getGeoresourceById(georesourceId);

        // TODO: test validations
    }

    /**
     * retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON
     * <p>
     * retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    @Disabled
    public void getGeoresourceByIdAndYearAndMonthTest() {
        String georesourceId = null;
        BigDecimal year = null;
        BigDecimal month = null;
        BigDecimal day = null;
        String simplifyGeometries = null;
        byte[] response = api.getGeoresourceByIdAndYearAndMonth(georesourceId, year, month, day, simplifyGeometries);

        // TODO: test validations
    }

    /**
     * retrieve the JSON schema for the selected geo-resource dataset
     * <p>
     * retrieve the JSON schema for the selected geo-resource dataset. The JSON schema indicates the property structure of the dataset.
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    @Disabled
    public void getGeoresourceSchemaByLevelTest() {
        String georesourceId = null;
        String response = api.getGeoresourceSchemaByLevel(georesourceId);

        // TODO: test validations
    }

    /**
     * retrieve information about available features of different geo-resource datasets
     * <p>
     * retrieve information about available features of different geo-resource datasets
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    public void getGeoresourcesTest() throws IOException {
        GeoresourceOverviewType georesource = new GeoresourceOverviewType();
        georesource.setGeoresourceId("testId");

        mockServer.expect(ExpectedCount.once(),
                requestTo(BASE_PATH + "/georesources"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withStatus(HttpStatus.OK)
                        .contentType(MediaType.APPLICATION_JSON)
                        .body(mapper.writeValueAsString(Arrays.asList(georesource)))
                );

        List<GeoresourceOverviewType> response = api.getGeoresources();

        mockServer.verify();
        Assertions.assertEquals(1, response.size());
        Assertions.assertEquals("testId", response.get(0).getGeoresourceId());
    }

    /**
     * Modify/Update the features of the selected geo-resource dataset
     * <p>
     * Modify/Update the features of the selected geo-resource dataset.  The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark &#39;old&#39; geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks.
     *
     * @throws RestClientException if the Api call fails
     */
    @org.junit.jupiter.api.Test
    public void updateGeoresourceAsBodyTest() throws IOException {
        String resourceId = "testId";

        HttpHeaders headers = new HttpHeaders();
        mockServer.expect(ExpectedCount.once(),
                requestTo(BASE_PATH + "/georesources/" + resourceId))
                .andExpect(method(HttpMethod.PUT))
                .andRespond(withStatus(HttpStatus.OK)
                );

        api.updateGeoresourceAsBodyWithHttpInfo(resourceId, Mockito.mock(GeoresourcePUTInputType.class));

        mockServer.verify();
    }

    /**
     * Modify/Update the metadata of the selected geo-resource dataset
     * <p>
     * Modify/Update the metadata of the selected geo-resource dataset. This replaces the formerly stored metadata.
     *
     * @throws RestClientException if the Api call fails
     */
    @Test
    @Disabled
    public void updateGeoresourceMetadataAsBodyTest() {
        String georesourceId = null;
        GeoresourcePATCHInputType metadata = null;
        api.updateGeoresourceMetadataAsBody(georesourceId, metadata);

        // TODO: test validations
    }

}
