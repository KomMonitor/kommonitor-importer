/*
// * KomMonitor Data Access API
// * erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.
// *
// * OpenAPI spec version: 0.0.1
// * Contact: christian.danowski-buhren@hs-bochum.de
// *
// * NOTE: This class is auto generated by the swagger code generator program.
// * https://github.com/swagger-api/swagger-codegen.git
// * Do not edit the class manually.
// */
//
//
//package org.n52.kommonitor.datamanagement.api.client;
//
//import java.util.List;
//
//import org.junit.jupiter.api.Test;
//import org.n52.kommonitor.models.ProcessScriptOverviewType;
//import org.n52.kommonitor.models.ProcessScriptPOSTInputType;
//import org.n52.kommonitor.models.ProcessScriptPUTInputType;
//
///**
// * API tests for ProcessScriptsApi
// */
//public class ProcessScriptsApiIT {
//
//    private final ProcessScriptsApi api = new ProcessScriptsApi();
//
//    
//    /**
//     * Register a new process script
//     *
//     * Register a process script associated to a certain indicator
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void addProcessScriptAsBodyTest() {
//        ProcessScriptPOSTInputType processScriptData = null;
//        api.addProcessScriptAsBody(processScriptData);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * Delete the process script
//     *
//     * Delete the process script associated to the specified indicator
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void deleteProcessScriptTest() {
//        String indicatorId = null;
//        api.deleteProcessScript(indicatorId);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * Delete the process script
//     *
//     * Delete the process script associated to the specified scriptId
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void deleteProcessScriptByScriptIdTest() {
//        String scriptId = null;
//        api.deleteProcessScriptByScriptId(scriptId);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * retrieve the process script code associated to a certain indicator as JavaScript file
//     *
//     * retrieve the process script code associated to a certain indicator as JavaScript file
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getProcessScriptCodeTest() {
//        String scriptId = null;
//        byte[] response = api.getProcessScriptCode(scriptId);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * retrieve the process script code associated to a certain indicator as JavaScript file
//     *
//     * retrieve the process script code associated to a certain indicator as JavaScript file
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getProcessScriptCodeForIndicatorTest() {
//        String indicatorId = null;
//        byte[] response = api.getProcessScriptCodeForIndicator(indicatorId);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * retrieve information about the associated process script for a certain indicator
//     *
//     * retrieve information about the associated process script for a certain indicator
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getProcessScriptForIndicatorTest() {
//        String indicatorId = null;
//        ProcessScriptOverviewType response = api.getProcessScriptForIndicator(indicatorId);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * retrieve information about the associated process script for a certain scriptId
//     *
//     * retrieve information about the associated process script for a certain scriptId
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getProcessScriptForScriptIdTest() {
//        String scriptId = null;
//        ProcessScriptOverviewType response = api.getProcessScriptForScriptId(scriptId);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * retrieve an empty script template, that defines how to implement process scripts for KomMonitor as JavaScript file.
//     *
//     * retrieve an empty script template, that defines how to implement process scripts for KomMonitor. The script works as a template for a NodeJS module. Hence, it predefines required methods that are called by the executing processing engine (a NodeJS runtimne environment). As a script developer, those predefined methods have to be implemented. The template contains detailed documentation on how to implement those methods.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getProcessScriptTemplateTest() {
//        byte[] response = api.getProcessScriptTemplate();
//
//        // TODO: test validations
//    }
//    
//    /**
//     * retrieve information about available process scripts
//     *
//     * retrieve information about available process scripts
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getProcessScriptsTest() {
//        List<ProcessScriptOverviewType> response = api.getProcessScripts();
//
//        // TODO: test validations
//    }
//    
//    /**
//     * Modify/Update an existing process script
//     *
//     * Modify/Update an existing process script associated to a certain indicator
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void updateProcessScriptAsBodyTest() {
//        String indicatorId = null;
//        ProcessScriptPUTInputType processScriptData = null;
//        api.updateProcessScriptAsBody(indicatorId, processScriptData);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * Modify/Update an existing process script
//     *
//     * Modify/Update an existing process script associated to a certain scriptId
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void updateProcessScriptAsBodyByScriptIdTest() {
//        String scriptId = null;
//        ProcessScriptPUTInputType processScriptData = null;
//        api.updateProcessScriptAsBodyByScriptId(scriptId, processScriptData);
//
//        // TODO: test validations
//    }
//    
//}
